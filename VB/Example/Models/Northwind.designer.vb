Imports System
Imports System.ComponentModel
Imports System.Linq.Expressions
Imports System.Linq
Imports System.Reflection
Imports System.Collections.Generic
Imports System.Data
Imports System.Data.Linq.Mapping
Imports System.Data.Linq

#Disable Warning BC1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Namespace Example.Models


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Northwind")>
	Partial Public Class NorthwindDataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub UpdateCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub DeleteCategory(ByVal instance As Category)
	End Sub
	Partial Private Sub InsertTerritory(ByVal instance As Territory)
	End Sub
	Partial Private Sub UpdateTerritory(ByVal instance As Territory)
	End Sub
	Partial Private Sub DeleteTerritory(ByVal instance As Territory)
	End Sub
	Partial Private Sub InsertCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub UpdateCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub DeleteCustomer(ByVal instance As Customer)
	End Sub
	Partial Private Sub InsertEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub UpdateEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub DeleteEmployee(ByVal instance As Employee)
	End Sub
	Partial Private Sub InsertOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	Partial Private Sub UpdateOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	Partial Private Sub DeleteOrder_Detail(ByVal instance As Order_Detail)
	End Sub
	Partial Private Sub InsertOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub UpdateOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub DeleteOrder(ByVal instance As Order)
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub InsertRegion(ByVal instance As Region)
	End Sub
	Partial Private Sub UpdateRegion(ByVal instance As Region)
	End Sub
	Partial Private Sub DeleteRegion(ByVal instance As Region)
	End Sub
	Partial Private Sub InsertShipper(ByVal instance As Shipper)
	End Sub
	Partial Private Sub UpdateShipper(ByVal instance As Shipper)
	End Sub
	Partial Private Sub DeleteShipper(ByVal instance As Shipper)
	End Sub
	Partial Private Sub InsertSupplier(ByVal instance As Supplier)
	End Sub
	Partial Private Sub UpdateSupplier(ByVal instance As Supplier)
	End Sub
	Partial Private Sub DeleteSupplier(ByVal instance As Supplier)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("NorthwindConnectionString").ConnectionString, mappingSource)
			OnCreated()
		End Sub

'INSTANT VB NOTE: The variable connection was renamed since Visual Basic does not handle local variables named the same as class members well:
		Public Sub New(ByVal connection_Conflict As String)
			MyBase.New(connection_Conflict, mappingSource)
			OnCreated()
		End Sub

'INSTANT VB NOTE: The variable connection was renamed since Visual Basic does not handle local variables named the same as class members well:
		Public Sub New(ByVal connection_Conflict As System.Data.IDbConnection)
			MyBase.New(connection_Conflict, mappingSource)
			OnCreated()
		End Sub

'INSTANT VB NOTE: The variable connection was renamed since Visual Basic does not handle local variables named the same as class members well:
		Public Sub New(ByVal connection_Conflict As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection_Conflict, mappingSource)
			OnCreated()
		End Sub

'INSTANT VB NOTE: The variable connection was renamed since Visual Basic does not handle local variables named the same as class members well:
		Public Sub New(ByVal connection_Conflict As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection_Conflict, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
			Get
				Return Me.GetTable(Of Category)()
			End Get
		End Property

		Public ReadOnly Property Territories() As System.Data.Linq.Table(Of Territory)
			Get
				Return Me.GetTable(Of Territory)()
			End Get
		End Property

		Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
			Get
				Return Me.GetTable(Of Customer)()
			End Get
		End Property

		Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
			Get
				Return Me.GetTable(Of Employee)()
			End Get
		End Property

		Public ReadOnly Property Order_Details() As System.Data.Linq.Table(Of Order_Detail)
			Get
				Return Me.GetTable(Of Order_Detail)()
			End Get
		End Property

		Public ReadOnly Property Orders() As System.Data.Linq.Table(Of Order)
			Get
				Return Me.GetTable(Of Order)()
			End Get
		End Property

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property

		Public ReadOnly Property Regions() As System.Data.Linq.Table(Of Region)
			Get
				Return Me.GetTable(Of Region)()
			End Get
		End Property

		Public ReadOnly Property Shippers() As System.Data.Linq.Table(Of Shipper)
			Get
				Return Me.GetTable(Of Shipper)()
			End Get
		End Property

		Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
			Get
				Return Me.GetTable(Of Supplier)()
			End Get
		End Property

		Public ReadOnly Property Invoices() As System.Data.Linq.Table(Of Invoice)
			Get
				Return Me.GetTable(Of Invoice)()
			End Get
		End Property

		Public ReadOnly Property OrderDetails() As System.Data.Linq.Table(Of OrderDetail)
			Get
				Return Me.GetTable(Of OrderDetail)()
			End Get
		End Property

		Public ReadOnly Property OrderReports() As System.Data.Linq.Table(Of OrderReport)
			Get
				Return Me.GetTable(Of OrderReport)()
			End Get
		End Property

		Public ReadOnly Property SalesPersons() As System.Data.Linq.Table(Of SalesPerson)
			Get
				Return Me.GetTable(Of SalesPerson)()
			End Get
		End Property

		Public ReadOnly Property Sales_by_Categories() As System.Data.Linq.Table(Of Sales_by_Category)
			Get
				Return Me.GetTable(Of Sales_by_Category)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Categories")>
	Partial Public Class Category
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _Description As String

		Private _Picture As System.Data.Linq.Binary

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnCategoryNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCategoryNameChanged()
	End Sub
	Partial Private Sub OnDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnDescriptionChanged()
	End Sub
	Partial Private Sub OnPictureChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPictureChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set(ByVal value As String)
				If (Me._Description <> value) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Picture", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>
		Public Property Picture() As System.Data.Linq.Binary
			Get
				Return Me._Picture
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Picture IsNot value) Then
					Me.OnPictureChanging(value)
					Me.SendPropertyChanging()
					Me._Picture = value
					Me.SendPropertyChanged("Picture")
					Me.OnPictureChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Products", ThisKey:="CategoryID", OtherKey:="CategoryID")>
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Category = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Territories")>
	Partial Public Class Territory
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _TerritoryID As String

		Private _TerritoryDescription As String

		Private _RegionID As Integer

		Private _Region As EntityRef(Of Region)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnTerritoryIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTerritoryIDChanged()
	End Sub
	Partial Private Sub OnTerritoryDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTerritoryDescriptionChanged()
	End Sub
	Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnRegionIDChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Region = CType(Nothing, EntityRef(Of Region))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerritoryID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
		Public Property TerritoryID() As String
			Get
				Return Me._TerritoryID
			End Get
			Set(ByVal value As String)
				If (Me._TerritoryID <> value) Then
					Me.OnTerritoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._TerritoryID = value
					Me.SendPropertyChanged("TerritoryID")
					Me.OnTerritoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerritoryDescription", DbType:="NChar(50) NOT NULL", CanBeNull:=False)>
		Public Property TerritoryDescription() As String
			Get
				Return Me._TerritoryDescription
			End Get
			Set(ByVal value As String)
				If (Me._TerritoryDescription <> value) Then
					Me.OnTerritoryDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._TerritoryDescription = value
					Me.SendPropertyChanged("TerritoryDescription")
					Me.OnTerritoryDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionID", DbType:="Int NOT NULL")>
		Public Property RegionID() As Integer
			Get
				Return Me._RegionID
			End Get
			Set(ByVal value As Integer)
				If (Me._RegionID <> value) Then
					If Me._Region.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnRegionIDChanging(value)
					Me.SendPropertyChanging()
					Me._RegionID = value
					Me.SendPropertyChanged("RegionID")
					Me.OnRegionIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Region_Territory", Storage:="_Region", ThisKey:="RegionID", OtherKey:="RegionID", IsForeignKey:=True)>
		Public Property Region() As Region
			Get
				Return Me._Region.Entity
			End Get
			Set(ByVal value As Region)
				Dim previousValue As Region = Me._Region.Entity
				If ((previousValue IsNot value) OrElse (Me._Region.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Region.Entity = Nothing
						previousValue.Territories.Remove(Me)
					End If
					Me._Region.Entity = value
					If (value IsNot Nothing) Then
						value.Territories.Add(Me)
						Me._RegionID = value.RegionID
					Else
						Me._RegionID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Region")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customers")>
	Partial Public Class Customer
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _CustomerID As String

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _Orders As EntitySet(Of Order)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Order)(New Action(Of Order)(AddressOf Me.attach_Orders), New Action(Of Order)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5) NOT NULL", CanBeNull:=False, IsPrimaryKey:=True)>
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging()
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")>
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")>
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Orders", ThisKey:="CustomerID", OtherKey:="CustomerID")>
		Public Property Orders() As EntitySet(Of Order)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Order))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Customer = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Customer = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employees")>
	Partial Public Class Employee
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _EmployeeID As Integer

		Private _LastName As String

		Private _FirstName As String

		Private _Title As String

		Private _TitleOfCourtesy As String

		Private _BirthDate? As DateTime

		Private _HireDate? As DateTime

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _HomePhone As String

		Private _Extension As String

		Private _Photo As System.Data.Linq.Binary

		Private _Notes As String

		Private _ReportsTo? As Integer

		Private _PhotoPath As String

		Private _Employees As EntitySet(Of Employee)

		Private _Orders As EntitySet(Of Order)

		Private _Employee1 As EntityRef(Of Employee)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnLastNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnLastNameChanged()
	End Sub
	Partial Private Sub OnFirstNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFirstNameChanged()
	End Sub
	Partial Private Sub OnTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTitleChanged()
	End Sub
	Partial Private Sub OnTitleOfCourtesyChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnTitleOfCourtesyChanged()
	End Sub
	Partial Private Sub OnBirthDateChanging(ByVal value? As DateTime)
	End Sub
	Partial Private Sub OnBirthDateChanged()
	End Sub
	Partial Private Sub OnHireDateChanging(ByVal value? As DateTime)
	End Sub
	Partial Private Sub OnHireDateChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnHomePhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnHomePhoneChanged()
	End Sub
	Partial Private Sub OnExtensionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnExtensionChanged()
	End Sub
	Partial Private Sub OnPhotoChanging(ByVal value As System.Data.Linq.Binary)
	End Sub
	Partial Private Sub OnPhotoChanged()
	End Sub
	Partial Private Sub OnNotesChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNotesChanged()
	End Sub
	Partial Private Sub OnReportsToChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnReportsToChanged()
	End Sub
	Partial Private Sub OnPhotoPathChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhotoPathChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Employees = New EntitySet(Of Employee)(New Action(Of Employee)(AddressOf Me.attach_Employees), New Action(Of Employee)(AddressOf Me.detach_Employees))
			Me._Orders = New EntitySet(Of Order)(New Action(Of Order)(AddressOf Me.attach_Orders), New Action(Of Order)(AddressOf Me.detach_Orders))
			Me._Employee1 = CType(Nothing, EntityRef(Of Employee))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property EmployeeID() As Integer
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value As Integer)
				If (Me._EmployeeID <> value) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)>
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set(ByVal value As String)
				If (Me._LastName <> value) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging()
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)>
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set(ByVal value As String)
				If (Me._FirstName <> value) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging()
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(30)")>
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set(ByVal value As String)
				If (Me._Title <> value) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging()
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TitleOfCourtesy", DbType:="NVarChar(25)")>
		Public Property TitleOfCourtesy() As String
			Get
				Return Me._TitleOfCourtesy
			End Get
			Set(ByVal value As String)
				If (Me._TitleOfCourtesy <> value) Then
					Me.OnTitleOfCourtesyChanging(value)
					Me.SendPropertyChanging()
					Me._TitleOfCourtesy = value
					Me.SendPropertyChanged("TitleOfCourtesy")
					Me.OnTitleOfCourtesyChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BirthDate", DbType:="DateTime")>
		Public Property BirthDate() As DateTime?
			Get
				Return Me._BirthDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._BirthDate.Equals(value)) Then
					Me.OnBirthDateChanging(value)
					Me.SendPropertyChanging()
					Me._BirthDate = value
					Me.SendPropertyChanged("BirthDate")
					Me.OnBirthDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HireDate", DbType:="DateTime")>
		Public Property HireDate() As DateTime?
			Get
				Return Me._HireDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._HireDate.Equals(value)) Then
					Me.OnHireDateChanging(value)
					Me.SendPropertyChanging()
					Me._HireDate = value
					Me.SendPropertyChanged("HireDate")
					Me.OnHireDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePhone", DbType:="NVarChar(24)")>
		Public Property HomePhone() As String
			Get
				Return Me._HomePhone
			End Get
			Set(ByVal value As String)
				If (Me._HomePhone <> value) Then
					Me.OnHomePhoneChanging(value)
					Me.SendPropertyChanging()
					Me._HomePhone = value
					Me.SendPropertyChanged("HomePhone")
					Me.OnHomePhoneChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension", DbType:="NVarChar(4)")>
		Public Property Extension() As String
			Get
				Return Me._Extension
			End Get
			Set(ByVal value As String)
				If (Me._Extension <> value) Then
					Me.OnExtensionChanging(value)
					Me.SendPropertyChanging()
					Me._Extension = value
					Me.SendPropertyChanged("Extension")
					Me.OnExtensionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Photo", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>
		Public Property Photo() As System.Data.Linq.Binary
			Get
				Return Me._Photo
			End Get
			Set(ByVal value As System.Data.Linq.Binary)
				If (Me._Photo IsNot value) Then
					Me.OnPhotoChanging(value)
					Me.SendPropertyChanging()
					Me._Photo = value
					Me.SendPropertyChanged("Photo")
					Me.OnPhotoChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set(ByVal value As String)
				If (Me._Notes <> value) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging()
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReportsTo", DbType:="Int")>
		Public Property ReportsTo() As Integer?
			Get
				Return Me._ReportsTo
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ReportsTo.Equals(value)) Then
					If Me._Employee1.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnReportsToChanging(value)
					Me.SendPropertyChanging()
					Me._ReportsTo = value
					Me.SendPropertyChanged("ReportsTo")
					Me.OnReportsToChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoPath", DbType:="NVarChar(255)")>
		Public Property PhotoPath() As String
			Get
				Return Me._PhotoPath
			End Get
			Set(ByVal value As String)
				If (Me._PhotoPath <> value) Then
					Me.OnPhotoPathChanging(value)
					Me.SendPropertyChanging()
					Me._PhotoPath = value
					Me.SendPropertyChanged("PhotoPath")
					Me.OnPhotoPathChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employees", ThisKey:="EmployeeID", OtherKey:="ReportsTo")>
		Public Property Employees() As EntitySet(Of Employee)
			Get
				Return Me._Employees
			End Get
			Set(ByVal value As EntitySet(Of Employee))
				Me._Employees.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Order", Storage:="_Orders", ThisKey:="EmployeeID", OtherKey:="EmployeeID")>
		Public Property Orders() As EntitySet(Of Order)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Order))
				Me._Orders.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Employee", Storage:="_Employee1", ThisKey:="ReportsTo", OtherKey:="EmployeeID", IsForeignKey:=True)>
		Public Property Employee1() As Employee
			Get
				Return Me._Employee1.Entity
			End Get
			Set(ByVal value As Employee)
				Dim previousValue As Employee = Me._Employee1.Entity
				If ((previousValue IsNot value) OrElse (Me._Employee1.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Employee1.Entity = Nothing
						previousValue.Employees.Remove(Me)
					End If
					Me._Employee1.Entity = value
					If (value IsNot Nothing) Then
						value.Employees.Add(Me)
						Me._ReportsTo = value.EmployeeID
					Else
						Me._ReportsTo = CType(Nothing, Integer?)
					End If
					Me.SendPropertyChanged("Employee1")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Employee1 = Me
		End Sub

		Private Sub detach_Employees(ByVal entity As Employee)
			Me.SendPropertyChanging()
			entity.Employee1 = Nothing
		End Sub

		Private Sub attach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Employee = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Employee = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order Details]")>
	Partial Public Class Order_Detail
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _ProductID As Integer

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _Order As EntityRef(Of Order)

		Private _Product As EntityRef(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnQuantityChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnQuantityChanged()
	End Sub
	Partial Private Sub OnDiscountChanging(ByVal value As Single)
	End Sub
	Partial Private Sub OnDiscountChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Order = CType(Nothing, EntityRef(Of Order))
			Me._Product = CType(Nothing, EntityRef(Of Product))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					If Me._Order.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					If Me._Product.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")>
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me.OnQuantityChanging(value)
					Me.SendPropertyChanging()
					Me._Quantity = value
					Me.SendPropertyChanged("Quantity")
					Me.OnQuantityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")>
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me.OnDiscountChanging(value)
					Me.SendPropertyChanging()
					Me._Discount = value
					Me.SendPropertyChanged("Discount")
					Me.OnDiscountChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Order_Detail", Storage:="_Order", ThisKey:="OrderID", OtherKey:="OrderID", IsForeignKey:=True)>
		Public Property Order() As Order
			Get
				Return Me._Order.Entity
			End Get
			Set(ByVal value As Order)
				Dim previousValue As Order = Me._Order.Entity
				If ((previousValue IsNot value) OrElse (Me._Order.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Order.Entity = Nothing
						previousValue.Order_Details.Remove(Me)
					End If
					Me._Order.Entity = value
					If (value IsNot Nothing) Then
						value.Order_Details.Add(Me)
						Me._OrderID = value.OrderID
					Else
						Me._OrderID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Order")
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Detail", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ProductID", IsForeignKey:=True)>
		Public Property Product() As Product
			Get
				Return Me._Product.Entity
			End Get
			Set(ByVal value As Product)
				Dim previousValue As Product = Me._Product.Entity
				If ((previousValue IsNot value) OrElse (Me._Product.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Product.Entity = Nothing
						previousValue.Order_Details.Remove(Me)
					End If
					Me._Product.Entity = value
					If (value IsNot Nothing) Then
						value.Order_Details.Add(Me)
						Me._ProductID = value.ProductID
					Else
						Me._ProductID = CType(Nothing, Integer)
					End If
					Me.SendPropertyChanged("Product")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Orders")>
	Partial Public Class Order
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _OrderID As Integer

		Private _CustomerID As String

		Private _EmployeeID? As Integer

		Private _OrderDate? As DateTime

		Private _RequiredDate? As DateTime

		Private _ShippedDate? As DateTime

		Private _ShipVia? As Integer

		Private _Freight? As Decimal

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Private _Order_Details As EntitySet(Of Order_Detail)

		Private _Customer As EntityRef(Of Customer)

		Private _Employee As EntityRef(Of Employee)

		Private _Shipper As EntityRef(Of Shipper)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnOrderIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnOrderIDChanged()
	End Sub
	Partial Private Sub OnCustomerIDChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCustomerIDChanged()
	End Sub
	Partial Private Sub OnEmployeeIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnEmployeeIDChanged()
	End Sub
	Partial Private Sub OnOrderDateChanging(ByVal value? As DateTime)
	End Sub
	Partial Private Sub OnOrderDateChanged()
	End Sub
	Partial Private Sub OnRequiredDateChanging(ByVal value? As DateTime)
	End Sub
	Partial Private Sub OnRequiredDateChanged()
	End Sub
	Partial Private Sub OnShippedDateChanging(ByVal value? As DateTime)
	End Sub
	Partial Private Sub OnShippedDateChanged()
	End Sub
	Partial Private Sub OnShipViaChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnShipViaChanged()
	End Sub
	Partial Private Sub OnFreightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnFreightChanged()
	End Sub
	Partial Private Sub OnShipNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipNameChanged()
	End Sub
	Partial Private Sub OnShipAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipAddressChanged()
	End Sub
	Partial Private Sub OnShipCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCityChanged()
	End Sub
	Partial Private Sub OnShipRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipRegionChanged()
	End Sub
	Partial Private Sub OnShipPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipPostalCodeChanged()
	End Sub
	Partial Private Sub OnShipCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnShipCountryChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Order_Details = New EntitySet(Of Order_Detail)(New Action(Of Order_Detail)(AddressOf Me.attach_Order_Details), New Action(Of Order_Detail)(AddressOf Me.detach_Order_Details))
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			Me._Employee = CType(Nothing, EntityRef(Of Employee))
			Me._Shipper = CType(Nothing, EntityRef(Of Shipper))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me.OnOrderIDChanging(value)
					Me.SendPropertyChanging()
					Me._OrderID = value
					Me.SendPropertyChanged("OrderID")
					Me.OnOrderIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5)")>
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerIDChanging(value)
					Me.SendPropertyChanging()
					Me._CustomerID = value
					Me.SendPropertyChanged("CustomerID")
					Me.OnCustomerIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeID", DbType:="Int")>
		Public Property EmployeeID() As Integer?
			Get
				Return Me._EmployeeID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._EmployeeID.Equals(value)) Then
					If Me._Employee.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging()
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>
		Public Property OrderDate() As DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me.OnOrderDateChanging(value)
					Me.SendPropertyChanging()
					Me._OrderDate = value
					Me.SendPropertyChanged("OrderDate")
					Me.OnOrderDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredDate", DbType:="DateTime")>
		Public Property RequiredDate() As DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me.OnRequiredDateChanging(value)
					Me.SendPropertyChanging()
					Me._RequiredDate = value
					Me.SendPropertyChanged("RequiredDate")
					Me.OnRequiredDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedDate", DbType:="DateTime")>
		Public Property ShippedDate() As DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me.OnShippedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ShippedDate = value
					Me.SendPropertyChanged("ShippedDate")
					Me.OnShippedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipVia", DbType:="Int")>
		Public Property ShipVia() As Integer?
			Get
				Return Me._ShipVia
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ShipVia.Equals(value)) Then
					If Me._Shipper.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnShipViaChanging(value)
					Me.SendPropertyChanging()
					Me._ShipVia = value
					Me.SendPropertyChanged("ShipVia")
					Me.OnShipViaChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money")>
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me.OnFreightChanging(value)
					Me.SendPropertyChanging()
					Me._Freight = value
					Me.SendPropertyChanged("Freight")
					Me.OnFreightChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipName", DbType:="NVarChar(40)")>
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me.OnShipNameChanging(value)
					Me.SendPropertyChanging()
					Me._ShipName = value
					Me.SendPropertyChanged("ShipName")
					Me.OnShipNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress", DbType:="NVarChar(60)")>
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me.OnShipAddressChanging(value)
					Me.SendPropertyChanging()
					Me._ShipAddress = value
					Me.SendPropertyChanged("ShipAddress")
					Me.OnShipAddressChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCity", DbType:="NVarChar(15)")>
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me.OnShipCityChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCity = value
					Me.SendPropertyChanged("ShipCity")
					Me.OnShipCityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipRegion", DbType:="NVarChar(15)")>
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me.OnShipRegionChanging(value)
					Me.SendPropertyChanging()
					Me._ShipRegion = value
					Me.SendPropertyChanged("ShipRegion")
					Me.OnShipRegionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")>
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me.OnShipPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._ShipPostalCode = value
					Me.SendPropertyChanged("ShipPostalCode")
					Me.OnShipPostalCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCountry", DbType:="NVarChar(15)")>
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me.OnShipCountryChanging(value)
					Me.SendPropertyChanging()
					Me._ShipCountry = value
					Me.SendPropertyChanged("ShipCountry")
					Me.OnShipCountryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Order_Order_Detail", Storage:="_Order_Details", ThisKey:="OrderID", OtherKey:="OrderID")>
		Public Property Order_Details() As EntitySet(Of Order_Detail)
			Get
				Return Me._Order_Details
			End Get
			Set(ByVal value As EntitySet(Of Order_Detail))
				Me._Order_Details.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Order", Storage:="_Customer", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=True)>
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set(ByVal value As Customer)
				Dim previousValue As Customer = Me._Customer.Entity
				If ((previousValue IsNot value) OrElse (Me._Customer.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Customer.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Customer.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._CustomerID = value.CustomerID
					Else
						Me._CustomerID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_Order", Storage:="_Employee", ThisKey:="EmployeeID", OtherKey:="EmployeeID", IsForeignKey:=True)>
		Public Property Employee() As Employee
			Get
				Return Me._Employee.Entity
			End Get
			Set(ByVal value As Employee)
				Dim previousValue As Employee = Me._Employee.Entity
				If ((previousValue IsNot value) OrElse (Me._Employee.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Employee.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Employee.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._EmployeeID = value.EmployeeID
					Else
						Me._EmployeeID = CType(Nothing, Integer?)
					End If
					Me.SendPropertyChanged("Employee")
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Shipper_Order", Storage:="_Shipper", ThisKey:="ShipVia", OtherKey:="ShipperID", IsForeignKey:=True)>
		Public Property Shipper() As Shipper
			Get
				Return Me._Shipper.Entity
			End Get
			Set(ByVal value As Shipper)
				Dim previousValue As Shipper = Me._Shipper.Entity
				If ((previousValue IsNot value) OrElse (Me._Shipper.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Shipper.Entity = Nothing
						previousValue.Orders.Remove(Me)
					End If
					Me._Shipper.Entity = value
					If (value IsNot Nothing) Then
						value.Orders.Add(Me)
						Me._ShipVia = value.ShipperID
					Else
						Me._ShipVia = CType(Nothing, Integer?)
					End If
					Me.SendPropertyChanged("Shipper")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Order = Me
		End Sub

		Private Sub detach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Order = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Products")>
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _ProductName As String

		Private _SupplierID? As Integer

		Private _CategoryID? As Integer

		Private _QuantityPerUnit As String

		Private _UnitPrice? As Decimal

		Private _UnitsInStock? As Short

		Private _UnitsOnOrder? As Short

		Private _ReorderLevel? As Short

		Private _Discontinued As Boolean

		Private _Order_Details As EntitySet(Of Order_Detail)

		Private _Category As EntityRef(Of Category)

		Private _Supplier As EntityRef(Of Supplier)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnProductNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNameChanged()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnCategoryIDChanged()
	End Sub
	Partial Private Sub OnQuantityPerUnitChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnQuantityPerUnitChanged()
	End Sub
	Partial Private Sub OnUnitPriceChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnUnitPriceChanged()
	End Sub
	Partial Private Sub OnUnitsInStockChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsInStockChanged()
	End Sub
	Partial Private Sub OnUnitsOnOrderChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnUnitsOnOrderChanged()
	End Sub
	Partial Private Sub OnReorderLevelChanging(ByVal value? As Short)
	End Sub
	Partial Private Sub OnReorderLevelChanged()
	End Sub
	Partial Private Sub OnDiscontinuedChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnDiscontinuedChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Order_Details = New EntitySet(Of Order_Detail)(New Action(Of Order_Detail)(AddressOf Me.attach_Order_Details), New Action(Of Order_Detail)(AddressOf Me.detach_Order_Details))
			Me._Category = CType(Nothing, EntityRef(Of Category))
			Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me.OnProductNameChanging(value)
					Me.SendPropertyChanging()
					Me._ProductName = value
					Me.SendPropertyChanged("ProductName")
					Me.OnProductNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="Int")>
		Public Property SupplierID() As Integer?
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._SupplierID.Equals(value)) Then
					If Me._Supplier.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int")>
		Public Property CategoryID() As Integer?
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._CategoryID.Equals(value)) Then
					If Me._Category.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._CategoryID = value
					Me.SendPropertyChanged("CategoryID")
					Me.OnCategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QuantityPerUnit", DbType:="NVarChar(20)")>
		Public Property QuantityPerUnit() As String
			Get
				Return Me._QuantityPerUnit
			End Get
			Set(ByVal value As String)
				If (Me._QuantityPerUnit <> value) Then
					Me.OnQuantityPerUnitChanging(value)
					Me.SendPropertyChanging()
					Me._QuantityPerUnit = value
					Me.SendPropertyChanged("QuantityPerUnit")
					Me.OnQuantityPerUnitChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money")>
		Public Property UnitPrice() As Decimal?
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._UnitPrice.Equals(value)) Then
					Me.OnUnitPriceChanging(value)
					Me.SendPropertyChanging()
					Me._UnitPrice = value
					Me.SendPropertyChanged("UnitPrice")
					Me.OnUnitPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsInStock", DbType:="SmallInt")>
		Public Property UnitsInStock() As Short?
			Get
				Return Me._UnitsInStock
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsInStock.Equals(value)) Then
					Me.OnUnitsInStockChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsInStock = value
					Me.SendPropertyChanged("UnitsInStock")
					Me.OnUnitsInStockChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitsOnOrder", DbType:="SmallInt")>
		Public Property UnitsOnOrder() As Short?
			Get
				Return Me._UnitsOnOrder
			End Get
			Set(ByVal value? As Short)
				If (Not Me._UnitsOnOrder.Equals(value)) Then
					Me.OnUnitsOnOrderChanging(value)
					Me.SendPropertyChanging()
					Me._UnitsOnOrder = value
					Me.SendPropertyChanged("UnitsOnOrder")
					Me.OnUnitsOnOrderChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderLevel", DbType:="SmallInt")>
		Public Property ReorderLevel() As Short?
			Get
				Return Me._ReorderLevel
			End Get
			Set(ByVal value? As Short)
				If (Not Me._ReorderLevel.Equals(value)) Then
					Me.OnReorderLevelChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderLevel = value
					Me.SendPropertyChanged("ReorderLevel")
					Me.OnReorderLevelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discontinued", DbType:="Bit NOT NULL")>
		Public Property Discontinued() As Boolean
			Get
				Return Me._Discontinued
			End Get
			Set(ByVal value As Boolean)
				If (Me._Discontinued <> value) Then
					Me.OnDiscontinuedChanging(value)
					Me.SendPropertyChanging()
					Me._Discontinued = value
					Me.SendPropertyChanged("Discontinued")
					Me.OnDiscontinuedChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_Order_Detail", Storage:="_Order_Details", ThisKey:="ProductID", OtherKey:="ProductID")>
		Public Property Order_Details() As EntitySet(Of Order_Detail)
			Get
				Return Me._Order_Details
			End Get
			Set(ByVal value As EntitySet(Of Order_Detail))
				Me._Order_Details.Assign(value)
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Product", Storage:="_Category", ThisKey:="CategoryID", OtherKey:="CategoryID", IsForeignKey:=True)>
		Public Property Category() As Category
			Get
				Return Me._Category.Entity
			End Get
			Set(ByVal value As Category)
				Dim previousValue As Category = Me._Category.Entity
				If ((previousValue IsNot value) OrElse (Me._Category.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Category.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Category.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._CategoryID = value.CategoryID
					Else
						Me._CategoryID = CType(Nothing, Integer?)
					End If
					Me.SendPropertyChanged("Category")
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="SupplierID", IsForeignKey:=True)>
		Public Property Supplier() As Supplier
			Get
				Return Me._Supplier.Entity
			End Get
			Set(ByVal value As Supplier)
				Dim previousValue As Supplier = Me._Supplier.Entity
				If ((previousValue IsNot value) OrElse (Me._Supplier.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._Supplier.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._Supplier.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._SupplierID = value.SupplierID
					Else
						Me._SupplierID = CType(Nothing, Integer?)
					End If
					Me.SendPropertyChanged("Supplier")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Product = Me
		End Sub

		Private Sub detach_Order_Details(ByVal entity As Order_Detail)
			Me.SendPropertyChanging()
			entity.Product = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Region")>
	Partial Public Class Region
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _RegionID As Integer

		Private _RegionDescription As String

		Private _Territories As EntitySet(Of Territory)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnRegionIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnRegionIDChanged()
	End Sub
	Partial Private Sub OnRegionDescriptionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionDescriptionChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Territories = New EntitySet(Of Territory)(New Action(Of Territory)(AddressOf Me.attach_Territories), New Action(Of Territory)(AddressOf Me.detach_Territories))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionID", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
		Public Property RegionID() As Integer
			Get
				Return Me._RegionID
			End Get
			Set(ByVal value As Integer)
				If (Me._RegionID <> value) Then
					Me.OnRegionIDChanging(value)
					Me.SendPropertyChanging()
					Me._RegionID = value
					Me.SendPropertyChanged("RegionID")
					Me.OnRegionIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegionDescription", DbType:="NChar(50) NOT NULL", CanBeNull:=False)>
		Public Property RegionDescription() As String
			Get
				Return Me._RegionDescription
			End Get
			Set(ByVal value As String)
				If (Me._RegionDescription <> value) Then
					Me.OnRegionDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._RegionDescription = value
					Me.SendPropertyChanged("RegionDescription")
					Me.OnRegionDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Region_Territory", Storage:="_Territories", ThisKey:="RegionID", OtherKey:="RegionID")>
		Public Property Territories() As EntitySet(Of Territory)
			Get
				Return Me._Territories
			End Get
			Set(ByVal value As EntitySet(Of Territory))
				Me._Territories.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Territories(ByVal entity As Territory)
			Me.SendPropertyChanging()
			entity.Region = Me
		End Sub

		Private Sub detach_Territories(ByVal entity As Territory)
			Me.SendPropertyChanging()
			entity.Region = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Shippers")>
	Partial Public Class Shipper
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ShipperID As Integer

		Private _CompanyName As String

		Private _Phone As String

		Private _Orders As EntitySet(Of Order)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnShipperIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnShipperIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Orders = New EntitySet(Of Order)(New Action(Of Order)(AddressOf Me.attach_Orders), New Action(Of Order)(AddressOf Me.detach_Orders))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipperID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property ShipperID() As Integer
			Get
				Return Me._ShipperID
			End Get
			Set(ByVal value As Integer)
				If (Me._ShipperID <> value) Then
					Me.OnShipperIDChanging(value)
					Me.SendPropertyChanging()
					Me._ShipperID = value
					Me.SendPropertyChanged("ShipperID")
					Me.OnShipperIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Shipper_Order", Storage:="_Orders", ThisKey:="ShipperID", OtherKey:="ShipVia")>
		Public Property Orders() As EntitySet(Of Order)
			Get
				Return Me._Orders
			End Get
			Set(ByVal value As EntitySet(Of Order))
				Me._Orders.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Shipper = Me
		End Sub

		Private Sub detach_Orders(ByVal entity As Order)
			Me.SendPropertyChanging()
			entity.Shipper = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Suppliers")>
	Partial Public Class Supplier
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _SupplierID As Integer

		Private _CompanyName As String

		Private _ContactName As String

		Private _ContactTitle As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Phone As String

		Private _Fax As String

		Private _HomePage As String

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnSupplierIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnSupplierIDChanged()
	End Sub
	Partial Private Sub OnCompanyNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCompanyNameChanged()
	End Sub
	Partial Private Sub OnContactNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactNameChanged()
	End Sub
	Partial Private Sub OnContactTitleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnContactTitleChanged()
	End Sub
	Partial Private Sub OnAddressChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnAddressChanged()
	End Sub
	Partial Private Sub OnCityChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCityChanged()
	End Sub
	Partial Private Sub OnRegionChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnRegionChanged()
	End Sub
	Partial Private Sub OnPostalCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPostalCodeChanged()
	End Sub
	Partial Private Sub OnCountryChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnCountryChanged()
	End Sub
	Partial Private Sub OnPhoneChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnPhoneChanged()
	End Sub
	Partial Private Sub OnFaxChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnFaxChanged()
	End Sub
	Partial Private Sub OnHomePageChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnHomePageChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)>
		Public Property SupplierID() As Integer
			Get
				Return Me._SupplierID
			End Get
			Set(ByVal value As Integer)
				If (Me._SupplierID <> value) Then
					Me.OnSupplierIDChanging(value)
					Me.SendPropertyChanging()
					Me._SupplierID = value
					Me.SendPropertyChanged("SupplierID")
					Me.OnSupplierIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property CompanyName() As String
			Get
				Return Me._CompanyName
			End Get
			Set(ByVal value As String)
				If (Me._CompanyName <> value) Then
					Me.OnCompanyNameChanging(value)
					Me.SendPropertyChanging()
					Me._CompanyName = value
					Me.SendPropertyChanged("CompanyName")
					Me.OnCompanyNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(30)")>
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set(ByVal value As String)
				If (Me._ContactName <> value) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging()
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactTitle", DbType:="NVarChar(30)")>
		Public Property ContactTitle() As String
			Get
				Return Me._ContactTitle
			End Get
			Set(ByVal value As String)
				If (Me._ContactTitle <> value) Then
					Me.OnContactTitleChanging(value)
					Me.SendPropertyChanging()
					Me._ContactTitle = value
					Me.SendPropertyChanged("ContactTitle")
					Me.OnContactTitleChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me.OnAddressChanging(value)
					Me.SendPropertyChanging()
					Me._Address = value
					Me.SendPropertyChanged("Address")
					Me.OnAddressChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging()
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me.OnRegionChanging(value)
					Me.SendPropertyChanging()
					Me._Region = value
					Me.SendPropertyChanged("Region")
					Me.OnRegionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging()
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging()
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(24)")>
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set(ByVal value As String)
				If (Me._Phone <> value) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging()
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(24)")>
		Public Property Fax() As String
			Get
				Return Me._Fax
			End Get
			Set(ByVal value As String)
				If (Me._Fax <> value) Then
					Me.OnFaxChanging(value)
					Me.SendPropertyChanging()
					Me._Fax = value
					Me.SendPropertyChanged("Fax")
					Me.OnFaxChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HomePage", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>
		Public Property HomePage() As String
			Get
				Return Me._HomePage
			End Get
			Set(ByVal value As String)
				If (Me._HomePage <> value) Then
					Me.OnHomePageChanging(value)
					Me.SendPropertyChanging()
					Me._HomePage = value
					Me.SendPropertyChanged("HomePage")
					Me.OnHomePageChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_Product", Storage:="_Products", ThisKey:="SupplierID", OtherKey:="SupplierID")>
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Supplier = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.Supplier = Nothing
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Invoices")>
	Partial Public Class Invoice

		Private _ShipName As String

		Private _ShipAddress As String

		Private _ShipCity As String

		Private _ShipRegion As String

		Private _ShipPostalCode As String

		Private _ShipCountry As String

		Private _CustomerID As String

		Private _CustomerName As String

		Private _Address As String

		Private _City As String

		Private _Region As String

		Private _PostalCode As String

		Private _Country As String

		Private _Salesperson As String

		Private _OrderID As Integer

		Private _OrderDate? As DateTime

		Private _RequiredDate? As DateTime

		Private _ShippedDate? As DateTime

		Private _ShipperName As String

		Private _ProductID As Integer

		Private _ProductName As String

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _ExtendedPrice? As Decimal

		Private _Freight? As Decimal

		Public Sub New()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipName", DbType:="NVarChar(40)")>
		Public Property ShipName() As String
			Get
				Return Me._ShipName
			End Get
			Set(ByVal value As String)
				If (Me._ShipName <> value) Then
					Me._ShipName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipAddress", DbType:="NVarChar(60)")>
		Public Property ShipAddress() As String
			Get
				Return Me._ShipAddress
			End Get
			Set(ByVal value As String)
				If (Me._ShipAddress <> value) Then
					Me._ShipAddress = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCity", DbType:="NVarChar(15)")>
		Public Property ShipCity() As String
			Get
				Return Me._ShipCity
			End Get
			Set(ByVal value As String)
				If (Me._ShipCity <> value) Then
					Me._ShipCity = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipRegion", DbType:="NVarChar(15)")>
		Public Property ShipRegion() As String
			Get
				Return Me._ShipRegion
			End Get
			Set(ByVal value As String)
				If (Me._ShipRegion <> value) Then
					Me._ShipRegion = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipPostalCode", DbType:="NVarChar(10)")>
		Public Property ShipPostalCode() As String
			Get
				Return Me._ShipPostalCode
			End Get
			Set(ByVal value As String)
				If (Me._ShipPostalCode <> value) Then
					Me._ShipPostalCode = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipCountry", DbType:="NVarChar(15)")>
		Public Property ShipCountry() As String
			Get
				Return Me._ShipCountry
			End Get
			Set(ByVal value As String)
				If (Me._ShipCountry <> value) Then
					Me._ShipCountry = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="NChar(5)")>
		Public Property CustomerID() As String
			Get
				Return Me._CustomerID
			End Get
			Set(ByVal value As String)
				If (Me._CustomerID <> value) Then
					Me._CustomerID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property CustomerName() As String
			Get
				Return Me._CustomerName
			End Get
			Set(ByVal value As String)
				If (Me._CustomerName <> value) Then
					Me._CustomerName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="NVarChar(60)")>
		Public Property Address() As String
			Get
				Return Me._Address
			End Get
			Set(ByVal value As String)
				If (Me._Address <> value) Then
					Me._Address = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(15)")>
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set(ByVal value As String)
				If (Me._City <> value) Then
					Me._City = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Region", DbType:="NVarChar(15)")>
		Public Property Region() As String
			Get
				Return Me._Region
			End Get
			Set(ByVal value As String)
				If (Me._Region <> value) Then
					Me._Region = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set(ByVal value As String)
				If (Me._PostalCode <> value) Then
					Me._PostalCode = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salesperson", DbType:="NVarChar(31) NOT NULL", CanBeNull:=False)>
		Public Property Salesperson() As String
			Get
				Return Me._Salesperson
			End Get
			Set(ByVal value As String)
				If (Me._Salesperson <> value) Then
					Me._Salesperson = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>
		Public Property OrderDate() As DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me._OrderDate = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RequiredDate", DbType:="DateTime")>
		Public Property RequiredDate() As DateTime?
			Get
				Return Me._RequiredDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._RequiredDate.Equals(value)) Then
					Me._RequiredDate = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShippedDate", DbType:="DateTime")>
		Public Property ShippedDate() As DateTime?
			Get
				Return Me._ShippedDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._ShippedDate.Equals(value)) Then
					Me._ShippedDate = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShipperName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ShipperName() As String
			Get
				Return Me._ShipperName
			End Get
			Set(ByVal value As String)
				If (Me._ShipperName <> value) Then
					Me._ShipperName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="Money NOT NULL")>
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")>
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExtendedPrice", DbType:="Money")>
		Public Property ExtendedPrice() As Decimal?
			Get
				Return Me._ExtendedPrice
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ExtendedPrice.Equals(value)) Then
					Me._ExtendedPrice = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Freight", DbType:="Money")>
		Public Property Freight() As Decimal?
			Get
				Return Me._Freight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Freight.Equals(value)) Then
					Me._Freight = value
				End If
			End Set
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderDetails")>
	Partial Public Class OrderDetail

		Private _OrderID As Integer

		Private _Quantity As Short

		Private _UnitPrice As Decimal

		Private _Discount As Single

		Private _ProductName As String

		Private _Supplier As String

		Public Sub New()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="SmallMoney NOT NULL")>
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")>
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Supplier", DbType:="NVarChar(217)")>
		Public Property Supplier() As String
			Get
				Return Me._Supplier
			End Get
			Set(ByVal value As String)
				If (Me._Supplier <> value) Then
					Me._Supplier = value
				End If
			End Set
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OrderReports")>
	Partial Public Class OrderReport

		Private _OrderID As Integer

		Private _ProductID As Integer

		Private _ProductName As String

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _Extended_Price? As Decimal

		Public Sub New()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="Int NOT NULL")>
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me._ProductID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="SmallMoney NOT NULL")>
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")>
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Extended Price]", Storage:="_Extended_Price", DbType:="Money")>
		Public Property Extended_Price() As Decimal?
			Get
				Return Me._Extended_Price
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Extended_Price.Equals(value)) Then
					Me._Extended_Price = value
				End If
			End Set
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SalesPerson")>
	Partial Public Class SalesPerson

		Private _OrderID As Integer

		Private _Country As String

		Private _FirstName As String

		Private _LastName As String

		Private _ProductName As String

		Private _CategoryName As String

		Private _OrderDate? As DateTime

		Private _UnitPrice As Decimal

		Private _Quantity As Short

		Private _Discount As Single

		Private _Extended_Price? As Decimal

		Private _Sales_Person As String

		Public Sub New()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="Int NOT NULL")>
		Public Property OrderID() As Integer
			Get
				Return Me._OrderID
			End Get
			Set(ByVal value As Integer)
				If (Me._OrderID <> value) Then
					Me._OrderID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(15)")>
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set(ByVal value As String)
				If (Me._Country <> value) Then
					Me._Country = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)>
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set(ByVal value As String)
				If (Me._FirstName <> value) Then
					Me._FirstName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)>
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set(ByVal value As String)
				If (Me._LastName <> value) Then
					Me._LastName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderDate", DbType:="DateTime")>
		Public Property OrderDate() As DateTime?
			Get
				Return Me._OrderDate
			End Get
			Set(ByVal value? As DateTime)
				If (Not Me._OrderDate.Equals(value)) Then
					Me._OrderDate = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UnitPrice", DbType:="SmallMoney NOT NULL")>
		Public Property UnitPrice() As Decimal
			Get
				Return Me._UnitPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._UnitPrice <> value) Then
					Me._UnitPrice = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quantity", DbType:="SmallInt NOT NULL")>
		Public Property Quantity() As Short
			Get
				Return Me._Quantity
			End Get
			Set(ByVal value As Short)
				If (Me._Quantity <> value) Then
					Me._Quantity = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Real NOT NULL")>
		Public Property Discount() As Single
			Get
				Return Me._Discount
			End Get
			Set(ByVal value As Single)
				If (Me._Discount <> value) Then
					Me._Discount = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Extended Price]", Storage:="_Extended_Price", DbType:="Money")>
		Public Property Extended_Price() As Decimal?
			Get
				Return Me._Extended_Price
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Extended_Price.Equals(value)) Then
					Me._Extended_Price = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[Sales Person]", Storage:="_Sales_Person", DbType:="NVarChar(31) NOT NULL", CanBeNull:=False)>
		Public Property Sales_Person() As String
			Get
				Return Me._Sales_Person
			End Get
			Set(ByVal value As String)
				If (Me._Sales_Person <> value) Then
					Me._Sales_Person = value
				End If
			End Set
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Sales by Category]")>
	Partial Public Class Sales_by_Category

		Private _CategoryID As Integer

		Private _CategoryName As String

		Private _ProductName As String

		Private _ProductSales? As Decimal

		Public Sub New()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryID", DbType:="Int NOT NULL")>
		Public Property CategoryID() As Integer
			Get
				Return Me._CategoryID
			End Get
			Set(ByVal value As Integer)
				If (Me._CategoryID <> value) Then
					Me._CategoryID = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="NVarChar(15) NOT NULL", CanBeNull:=False)>
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set(ByVal value As String)
				If (Me._CategoryName <> value) Then
					Me._CategoryName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductName", DbType:="NVarChar(40) NOT NULL", CanBeNull:=False)>
		Public Property ProductName() As String
			Get
				Return Me._ProductName
			End Get
			Set(ByVal value As String)
				If (Me._ProductName <> value) Then
					Me._ProductName = value
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSales", DbType:="SmallMoney")>
		Public Property ProductSales() As Decimal?
			Get
				Return Me._ProductSales
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._ProductSales.Equals(value)) Then
					Me._ProductSales = value
				End If
			End Set
		End Property
	End Class
End Namespace
#Enable Warning BC1591
